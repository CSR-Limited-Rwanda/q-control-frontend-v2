'use client'
import React from 'react'
import RichTextField from '@/components/RichTextField'

const Step6Summary = ({ formData, setFormData, handleChange, isFieldInvalid, getFieldError }) => {
    // Handle file upload
    const handleFileChange = (e) => {
        const files = Array.from(e.target.files)
        handleChange({ 
            target: { 
                name: 'documents', 
                value: files 
            } 
        })
    }

    // Handle rich text field changes
    const handleRichTextChange = (field, value) => {
        handleChange({ 
            target: { 
                name: field, 
                value: value 
            } 
        })
    }

    return (
        <div className="step-container">
            <h3>Step 6: Summary</h3>
            <form>
                {/* Brief Summary of Incident */}
                <div className="field-group">
                    <label htmlFor="brief_summary_of_incident">Brief Summary of Incident *</label>
                    <RichTextField
                        value={formData.brief_summary_of_incident || ''}
                        onEditorChange={(value) => handleRichTextChange('brief_summary_of_incident', value)}
                        placeholder="Provide a brief summary of what happened..."
                    />
                    {isFieldInvalid('brief_summary_of_incident') && (
                        <span className="error-message">{getFieldError('brief_summary_of_incident')}</span>
                    )}
                </div>

                {/* Immediate Actions Taken */}
                <div className="field-group">
                    <label htmlFor="immediate_action_taken">Immediate Actions Taken *</label>
                    <RichTextField
                        value={formData.immediate_action_taken || ''}
                        onEditorChange={(value) => handleRichTextChange('immediate_action_taken', value)}
                        placeholder="Describe the immediate actions that were taken..."
                    />
                    {isFieldInvalid('immediate_action_taken') && (
                        <span className="error-message">{getFieldError('immediate_action_taken')}</span>
                    )}
                </div>

                {/* Response */}
                <div className="field-group">
                    <label htmlFor="response">Response</label>
                    <RichTextField
                        value={formData.response || ''}
                        onEditorChange={(value) => handleRichTextChange('response', value)}
                        placeholder="Describe the overall response to the incident..."
                    />
                    {isFieldInvalid('response') && (
                        <span className="error-message">{getFieldError('response')}</span>
                    )}
                </div>

                {/* File Upload */}
                <div className="field-group">
                    <label htmlFor="documents">Supporting Documents</label>
                    <input
                        type="file"
                        id="documents"
                        name="documents"
                        onChange={handleFileChange}
                        multiple
                        className="file-input"
                        accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt"
                    />
                    <div className="file-help">
                        You can upload multiple files (PDF, DOC, DOCX, JPG, PNG, TXT)
                    </div>
                    {formData.documents && formData.documents.length > 0 && (
                        <div className="uploaded-files">
                            <p>Selected files:</p>
                            <ul>
                                {Array.from(formData.documents).map((file, index) => (
                                    <li key={index}>{file.name}</li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>

                {/* Summary Information */}
                <div className="summary-info">
                    <h4>Incident Summary</h4>
                    <div className="summary-grid">
                        <div className="summary-item">
                            <strong>Incident Type:</strong> {formData.incident_type || 'Not specified'}
                        </div>
                        <div className="summary-item">
                            <strong>Location:</strong> {formData.location || 'Not specified'}
                        </div>
                        <div className="summary-item">
                            <strong>Date:</strong> {formData.incident_date || 'Not specified'}
                        </div>
                        <div className="summary-item">
                            <strong>Outcome:</strong> {formData.outcome || 'Not specified'}
                        </div>
                        {formData.patient_visitor && (
                            <>
                                <div className="summary-item">
                                    <strong>Patient/Visitor:</strong> {formData.patient_visitor.first_name} {formData.patient_visitor.last_name}
                                </div>
                                <div className="summary-item">
                                    <strong>Profile Type:</strong> {formData.patient_visitor.profile_type}
                                </div>
                            </>
                        )}
                    </div>
                </div>
            </form>
        </div>
    )
}

export default Step6Summary